# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_examples.ipynb.

# %% auto 0
__all__ = ['FORMAT', 'FILENAME', 'CUSTOM_LEVEL', 'formatter', 'example_01', 'example_02', 'example_03', 'example_04',
           'example_05', 'example_06_get_logger', 'example_06_configure_handler', 'example_06', 'example_07_get_logger',
           'example_07_configure_file_handler', 'example_07_configure_screen_handler', 'example_07']

# %% ../00_examples.ipynb 3
import logging
logging.basicConfig(
    format='"%(asctime)s",%(name)s,%(funcName)s,%(levelname)s,"%(message)s"',
    level=logging.INFO)


# %% ../00_examples.ipynb 4
def example_01() -> None:
    '''
    Example 01
    Print debugging to the screen using print()
    '''
    print('This debug message uses print.')



# %% ../00_examples.ipynb 7
def example_02() -> None:
    '''
    Example 02
    Log to the screen with the root logger.

    '''
    
    rootlogger = logging.getLogger()
    old_level = rootlogger.getEffectiveLevel()
    rootlogger.setLevel(level=logging.DEBUG)
    logging.debug('This debug message uses the root logger.')
    logging.getLogger().setLevel(old_level)





# %% ../00_examples.ipynb 10
def example_03() -> None:
    '''
    Example 03
    Add formatting to the root logger a custom format string.
    '''
    
    rootlogger = logging.getLogger()
    my_format = logging.Formatter('"%(asctime)s",%(name)s,%(levelname)s,"%(message)s"')
    rootlogger.handlers[0].setFormatter(my_format)
    
    logging.info('This uses the root logger with a custom format, adding context information to each message.')
    


# %% ../00_examples.ipynb 12
def example_04():
    '''
    Example 04
    Use a named logger that has unique properties from the root logger.
    '''

    # Let's create a custom logger, my_logger.
    my_logger = logging.getLogger(__name__)
    my_logger.setLevel(logging.DEBUG)
    logging.info('This INFO message sent to the root logger will display.')
    logging.debug('We will not see this because DEBUG is lower than the root level INFO.')

    my_logger = logging.getLogger(__name__)
    my_logger.debug('The __main__ logger is set to a level of DEBUG, so this message displays.')
    my_logger.info('Note the __main__ logger uses the format from root.')



# %% ../00_examples.ipynb 14
def example_05():
    '''
    Example 05
    Log to a file with print()
    '''
    import sys

    with open(file='example_print.log', mode='a') as file:
        print('This is an example of writing to a logfile with print.', file=file)

# %% ../00_examples.ipynb 16
def example_06_get_logger(level=logging.INFO):
    '''
    Example 06
    Customize our logger with a file handler and a formatter.
    '''
    logger =  logging.getLogger(__name__)
    logger.setLevel(level)
    return logger
    
def example_06_configure_handler(filename=None, format=None, level=logging.INFO) -> logging.Handler:
    '''
    We create and customize a file logger with a logging.Handler that
    send log messages to a file.
     - add a custom formatter
    '''
    if filename is not None:
        handler = logging.FileHandler(filename=filename, mode='a')
        handler.setFormatter(fmt=logging.Formatter(format))
    else:
        handler = None
    return handler

def example_06():
    FORMAT = '"%(asctime)s",%(module)s,%(name)s,%(levelname)s,"%(message)s"'
    FILENAME='example_06.log'

    logger = example_06_get_logger(level=logging.INFO) # the screen handler won't show debug messages

    logger.addHandler(
        example_06_configure_handler(format=FORMAT, 
                                     filename=FILENAME, 
                                     level=logging.DEBUG)) # the file handler WILL show debug messages.

    logger.debug(f"Debug messages go to the file {FILENAME}")

# %% ../00_examples.ipynb 19
'''
Example 07
A logger that sends debug messages to the screen and info messages to a file
'''

FORMAT = '"%(asctime)s",%(module)s,%(funcName)s, %(name)s,%(levelname)s,"%(message)s"'
FILENAME='example_07.log'
CUSTOM_LEVEL = logging.DEBUG

formatter = logging.Formatter(fmt=FORMAT)

def example_07_get_logger() -> logging.getLogger:
    logger =  logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    return logger

def example_07_configure_file_handler(filename=FILENAME) -> logging.Handler:

    file_handler = logging.FileHandler(filename=FILENAME, mode='a')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    return file_handler

def example_07_configure_screen_handler() -> logging.Handler:
    import sys

    screen_handler = logging.StreamHandler(stream=sys.stdout)
    screen_handler.setLevel(CUSTOM_LEVEL)
    screen_handler.setFormatter(formatter)

    return screen_handler

def example_07():
    logger = example_07_get_logger()
    logger.addHandler(example_07_configure_screen_handler())
    logger.addHandler(example_07_configure_file_handler())

    logger.debug('debug')
    logger.info("Info messages go to screen and file")
